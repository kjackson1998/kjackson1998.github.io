export default class t{constructor(t){this.baseUrl="https://api.spacetraders.io/v2/",this.authKey=null,this.rateRemaining=2,this.rateResetAt=null,this.fetch=t}fixBase(t){try{return new URL(t),t}catch(a){return this.baseUrl+t}}async callApiPaged(t,a,s){t=this.fixBase(t);const e=[];let i,n,r=1;do{if((t=new URL(t)).searchParams.set("limit",20),t.searchParams.set("page",r),t=t.toString(),n=await this.callApi(t,a,s),200!=n.status)return n.pagedData=e,n;i=await n.json(),e.push(...i.data),r++}while(i.meta.page<i.meta.total/i.meta.limit);return n.pagedData=e,n}async callApi(t,a,s){t=this.fixBase(t);const e={Accept:"application/json"};this.authKey&&(e.Authorization="Bearer "+this.authKey);const i={headers:e};for(a&&(i.method=a),s&&(i.body=JSON.stringify(s));;){if(this.rateRemaining<=0){const t=Date.now();if(t<this.rateResetAt){const a=this.rateResetAt-t;await new Promise((t=>setTimeout(t,a)))}}const a=await this.fetch(t,i);if(this.rateRemaining=parseInt(a.headers.get("x-ratelimit-remaining")),this.rateResetAt=new Date(a.headers.get("x-ratelimit-reset")),429!=a.status)return a;console.log("hit 429")}}async fetchMyShips(){const t=await this.callApiPaged("my/ships");if(200!=t.status)throw"Could not load my ships: "+await t.text();return t.pagedData}async fetchSystem(t){const a=await this.callApi(`systems/${t}`);if(200!=a.status)throw"Could not load system data: "+await a.text();return(await a.json()).data}async fetchWaypoints(t){const a=await this.callApiPaged(`systems/${system.symbol}/waypoints`);if(200!=systemResponse.status)throw`Could not load ${t} data: `+await systemResponse.text();return a.pagedData}}