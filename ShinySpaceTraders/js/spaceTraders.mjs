export default class t{constructor(t){this.t="https://api.spacetraders.io/v2/",this.i=null,this.o=2,this.h=null,this.fetch=t}l(t){try{return new URL(t),t}catch(s){return this.t+t}}async p(t,s,i){t=this.l(t);const a=[];let e,n,o=1;do{if((t=new URL(t)).searchParams.set("limit",20),t.searchParams.set("page",o),t=t.toString(),n=await this.u(t,s,i),200!=n.status)return n.m=a,n;e=await n.json(),a.push(...e.data),o++}while(e.R.page<e.R.total/e.R.A);return n.m=a,n}async u(t,s,i,a=!1){t=this.l(t);const e={C:"application/json"};this.i&&(e.D="Bearer "+this.i);const n={headers:e};for(s&&(n.method=s),i&&(n.body=JSON.stringify(i));;){if(a&&this.o<=0){const t=Date.now();if(t<this.h){const s=this.h-t;await new Promise((t=>setTimeout(t,s)))}}const s=await this.fetch(t,n);if(this.o=parseInt(s.headers.get("x-ratelimit-remaining")),this.h=new Date(s.headers.get("x-ratelimit-reset")),429!=s.status)return s;console.log("429: "+(this.h-Date.now())),a=!0}}async S(){const t=await this.p("my/ships");if(200!=t.status)throw"Could not load my ships: "+await t.text();return t.m}async $(t){const s=await this.u(`systems/${t}`);if(200!=s.status)throw"Could not load system data: "+await s.text();return(await s.json()).data}async B(t){const s=await this.p(`systems/${system.symbol}/waypoints`);if(200!=systemResponse.status)throw`Could not load ${t} data: `+await systemResponse.text();return s.m}}